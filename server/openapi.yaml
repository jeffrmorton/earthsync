openapi: 3.0.3
info:
  title: EarthSync Server API
  description: API for managing users, key exchange, and historical spectrogram data in the EarthSync project.
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Main server (HTTP)
paths:
  /health:
    get:
      summary: Check server health
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  uptime:
                    type: number
                    example: 123.45
                  redis:
                    type: string
                    example: OK
                  postgres:
                    type: string
                    example: OK
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Registration successful
        '400':
          description: Invalid input or username exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /login:
    post:
      summary: Log in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /key-exchange:
    post:
      summary: Exchange encryption key for WebSocket
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Key exchanged successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  key:
                    type: string
                    example: 1a2b3c4d5e6f7g8h9i0j1k2l3m4n5o6p
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /history/{hours}:
    get:
      summary: Retrieve historical spectrogram data
      security:
        - bearerAuth: []
      parameters:
        - name: hours
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 24
          description: Number of hours of historical data to retrieve
      responses:
        '200':
          description: Historical data retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    type: number
        '400':
          description: Invalid hours parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{username}:
    delete:
      summary: Delete a user
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: Username to delete
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /metrics:
    get:
      summary: Prometheus metrics endpoint
      responses:
        '200':
          description: Metrics retrieved
          content:
            text/plain:
              schema:
                type: string
                example: |
                  http_requests_total{method="GET",route="/health",status="200"} 10
                  websocket_connections_active 2
        '500':
          description: Server error
          content:
            text/plain:
              schema:
                type: string
components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          example: Invalid input
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
