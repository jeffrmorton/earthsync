name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        continue-on-error: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
        continue-on-error: false

      - name: Install Docker Compose
        run: |
          sudo mkdir -p /usr/local/lib/docker/cli-plugins
          sudo curl -SL https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-linux-x86_64 -o /usr/local/lib/docker/cli-plugins/docker-compose
          sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
          docker compose version
        continue-on-error: false

      - name: Build and run services with Docker Compose
        run: |
          echo "Verifying docker-compose.yml..."
          grep -A 5 "healthcheck:" "$GITHUB_WORKSPACE/earthsync/docker-compose.yml" || echo "Healthcheck section not found or malformed"
          docker compose up -d --build
        continue-on-error: false

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for server to be ready..."
          for i in {1..30}; do
            if curl -f http://localhost:3000/health; then
              echo "Server is ready!"
              break
            fi
            echo "Attempt $i/30: Server not ready yet..."
            sleep 2
          done
          if [ $i -eq 30 ]; then
            echo "Server failed to start within 60 seconds"
            docker compose logs
            exit 1
          fi
        continue-on-error: false

      - name: Set up Node.js for testing
        uses: actions/setup-node@v4
        with:
          node-version: '18'
        continue-on-error: false

      - name: Install test dependencies
        run: |
          npm install axios ws ioredis bcryptjs jsonwebtoken jest crypto-js --save-dev
        continue-on-error: false

      - name: Run server and integration tests with multi-detector support and frequency range
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_PASSWORD: password
        run: |
          cat << 'TEST_EOF' > test.js
          const axios = require('axios');
          const WebSocket = require('ws');
          const Redis = require('ioredis');
          const bcrypt = require('bcryptjs');
          const jwt = require('jsonwebtoken');
          const CryptoJS = require('crypto-js');

          const API_BASE_URL = 'http://localhost:3000';
          const WS_URL = 'ws://localhost:3000';
          const JWT_SECRET = '1a2b3c4d5e6f7g8h9i0j1k2l3m4n5o6p';
          const redis = new Redis({
            host: process.env.REDIS_HOST,
            port: process.env.REDIS_PORT,
            password: process.env.REDIS_PASSWORD
          });

          const FREQUENCY_RANGE = 5501;
          const SCHUMANN_FREQUENCIES = [7.83, 14.3, 20.8, 27.3, 33.8, 39.0, 45.0, 51.0];
          const NOISE_LEVEL = 2.0;
          const FREQUENCY_SHIFT = 0.3;
          const BASE_AMPLITUDE = 15.0;
          const AMPLITUDE_DECREASE_FACTOR = 0.8;

          function generateSpectrogram() {
            const spectrogram = new Array(FREQUENCY_RANGE).fill(0);
            SCHUMANN_FREQUENCIES.forEach((freq, index) => {
              const shift = (Math.random() - 0.5) * FREQUENCY_SHIFT;
              const indexHz = Math.floor((freq + shift) * 100); // Scale to 0-5500
              const amplitudeScale = BASE_AMPLITUDE * Math.pow(AMPLITUDE_DECREASE_FACTOR, index);
              for (let i = Math.max(0, indexHz - 50); i < Math.min(FREQUENCY_RANGE, indexHz + 50); i++) {
                const distance = Math.abs(i - indexHz);
                spectrogram[i] += amplitudeScale * Math.exp(-(distance * distance) / 200);
              }
            });
            for (let i = 0; i < FREQUENCY_RANGE; i++) spectrogram[i] += Math.random() * NOISE_LEVEL;
            return spectrogram;
          }

          describe('EarthSync API Tests', () => {
            let token;
            let key;

            beforeAll(async () => {
              await redis.ping();
            });

            afterAll(async () => {
              await redis.quit();
            }, 15000);

            test('Health endpoint', async () => {
              const response = await axios.get(`${API_BASE_URL}/health`);
              expect(response.status).toBe(200);
              expect(response.data.status).toBe('OK');
            });

            test('Register with valid data', async () => {
              try {
                await axios.delete(`${API_BASE_URL}/users/testuser`, { headers: { Authorization: `Bearer ${token}` } });
              } catch (err) {}
              const response = await axios.post(`${API_BASE_URL}/register`, { username: 'testuser', password: 'testpass123' });
              expect(response.status).toBe(201);
            });

            test('Login with valid credentials', async () => {
              const response = await axios.post(`${API_BASE_URL}/login`, { username: 'testuser', password: 'testpass123' });
              expect(response.status).toBe(200);
              expect(response.data.token).toBeDefined();
              token = response.data.token;
            });

            test('Key exchange', async () => {
              const response = await axios.post(`${API_BASE_URL}/key-exchange`, {}, { headers: { Authorization: `Bearer ${token}` } });
              expect(response.status).toBe(200);
              expect(response.data.key).toBeDefined();
              key = response.data.key;
            });

            test('History with multi-detector data and frequency range', async () => {
              await redis.keys('spectrogram_history:*').then(keys => redis.del(...keys)); // Clear all history keys
              for (let i = 0; i < 5; i++) {
                const spectrogram = generateSpectrogram();
                const timestamp = new Date(Date.now() - (60 - i * 10) * 60 * 1000).toISOString();
                await redis.lpush('spectrogram_history:detector1', JSON.stringify({ spectrogram, timestamp, interval: 5000, detectorId: 'detector1', location: { lat: 40.7128, lon: -74.0060 } }));
                await redis.lpush('spectrogram_history:detector2', JSON.stringify({ spectrogram, timestamp, interval: 5000, detectorId: 'detector2', location: { lat: 51.5074, lon: -0.1278 } }));
              }
              const responseAll = await axios.get(`${API_BASE_URL}/history/1`, { headers: { Authorization: `Bearer ${token}` } });
              expect(responseAll.status).toBe(200);
              expect(Array.isArray(responseAll.data)).toBe(true);
              expect(responseAll.data.length).toBe(3); // Expect all three detectors from docker-compose
              expect(responseAll.data[0].detectorId).toBeDefined();
              expect(responseAll.data[0].location).toHaveProperty('lat');
              const spectrogram = responseAll.data[0].spectrogram;
              expect(spectrogram.length).toBeGreaterThan(1000); // Ensure full frequency range after downsampling
              expect(Math.max(...spectrogram)).toBeGreaterThan(10); // Verify amplitude spans expected range
            });

            test('WebSocket connection with multi-detector data', async () => {
              const ws = new WebSocket(`${WS_URL}/?token=${token}`);
              await new Promise(resolve => ws.on('open', resolve));
              const messagePromise = new Promise(resolve => ws.on('message', data => resolve(data.toString('utf8'))));
              const spectrogram = generateSpectrogram();
              await redis.xadd('spectrogram_stream', '*', 'data', JSON.stringify({ 
                spectrogram, 
                timestamp: new Date().toISOString(), 
                interval: 5000, 
                detectorId: 'detector_test', 
                location: { lat: 40.7128, lon: -74.0060 } 
              }));
              const message = await messagePromise;
              expect(message).toContain(':');
              const [encrypted, iv] = message.split(':');
              const encryptedBuf = CryptoJS.enc.Base64.parse(encrypted);
              const ivBuf = CryptoJS.enc.Base64.parse(iv);
              const keyWordArray = CryptoJS.enc.Hex.parse(key);
              const decrypted = CryptoJS.AES.decrypt({ ciphertext: encryptedBuf }, keyWordArray, { iv: ivBuf, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 });
              const decryptedData = JSON.parse(decrypted.toString(CryptoJS.enc.Utf8));
              expect(decryptedData.spectrogram.length).toBeGreaterThan(1000); // Verify full frequency range
              ws.close();
            });
          });
          TEST_EOF
          npx jest test.js --runInBand --detectOpenHandles
        continue-on-error: false

      - name: Clean up
        if: always()
        run: |
          echo "Verifying docker-compose.yml before cleanup..."
          grep -A 5 "healthcheck:" "$GITHUB_WORKSPACE/earthsync/docker-compose.yml" || echo "Healthcheck section not found or malformed"
          docker compose down -v
        continue-on-error: false
