# .github/workflows/build-and-test.yml
name: Build and Test EarthSync

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15 # Increased slightly for DB interactions

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: earthsync
        continue-on-error: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
        continue-on-error: false

      - name: Install Docker Compose V2
        run: |
          DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
          mkdir -p $DOCKER_CONFIG/cli-plugins
          curl -SL https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
          chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
          docker compose version
        continue-on-error: false

      - name: Verify docker-compose.yml exists
        working-directory: ./earthsync
        run: |
          ls -l docker-compose.yml
          echo "Verifying docker-compose.yml content (healthcheck example)..."
          grep -A 5 "healthcheck:" docker-compose.yml || echo "Healthcheck section not found or malformed (may be OK)"

      - name: Build and Run Services with Docker Compose
        working-directory: ./earthsync
        run: docker compose up -d --build --remove-orphans
        continue-on-error: false

      - name: Wait for Services to be Healthy
        working-directory: ./earthsync
        run: |
          echo "Waiting for services to stabilize and become healthy..."
          sleep 20 # Slightly longer sleep before health check
          echo "Checking service health status..."
          MAX_RETRIES=30
          RETRY_INTERVAL=3
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Attempt $i/$MAX_RETRIES: Checking server health..."
            # Use numeric status code check and handle potential curl errors
            SERVER_HEALTH_STATUS=$(curl -o /dev/null -w "%{http_code}" -fsS --max-time 3 http://localhost:3000/health || echo "000")
            if [[ "$SERVER_HEALTH_STATUS" == "200" ]]; then
              SERVER_HEALTH=$(curl -fsS --max-time 3 http://localhost:3000/health)
               # Add extra checks for redis/db status within health response if needed
               if [[ "$SERVER_HEALTH" == *"redis_main\":\"OK\""* ]] && [[ "$SERVER_HEALTH" == *"redis_stream\":\"OK\""* ]] && [[ "$SERVER_HEALTH" == *"postgres\":\"OK\""* ]]; then
                   echo "Server is healthy! Redis and DB are OK."
                   sleep 5 # Extra pause after health check passes
                   break
               else
                   echo "Server responding but dependencies might not be ready: $SERVER_HEALTH"
               fi
            else
                echo "Server not healthy yet (HTTP Status: $SERVER_HEALTH_STATUS)."
            fi

            if [ $i -eq $MAX_RETRIES ]; then
              echo "Server failed to become healthy within timeout."
              echo "--- Server Health Response (if any) ---"; curl -fsS --max-time 2 http://localhost:3000/health || echo "No response"; echo "--- Server Logs ---"; docker compose logs server || echo "Failed to get server logs."; echo "--- DB Logs ---"; docker compose logs postgres || echo "Failed to get DB logs."; echo "--- Detector1 Logs ---"; docker compose logs detector1 || echo "Failed to get detector1 logs."; exit 1
            fi
            sleep $RETRY_INTERVAL
          done
        continue-on-error: false

      - name: Set up Node.js for Testing
        uses: actions/setup-node@v4
        with:
          node-version: '18'
        continue-on-error: false

      - name: Install Test Dependencies
        working-directory: ./earthsync
        # Add pg dependency
        run: npm install --save-dev axios ws ioredis bcryptjs jsonwebtoken jest@^29 crypto-js pg
        continue-on-error: false

      - name: Run Integration Tests
        working-directory: ./earthsync
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_PASSWORD: password
          API_BASE_URL: http://localhost:3000
          WS_URL: ws://localhost:3000
          JWT_SECRET: 1a2b3c4d5e6f7g8h9i0j1k2l3m4n5o6p
          API_INGEST_KEY: changeme-in-production # Match server .env for testing
          NODE_ENV: test
          JEST_TIMEOUT: 45000 # Increased Jest timeout further for DB interaction
          # Database connection for seeding/verification within tests
          DB_HOST: localhost
          DB_PORT: 5432 # Default port exposed by docker-compose
          DB_USER: user # Match docker-compose default
          DB_PASSWORD: password # Match docker-compose default
          DB_NAME: earthsync # Match docker-compose default
          # Set retention low for testing archival boundary (e.g., 1 minute = 60000 ms)
          # These need to be available to the server process during test execution
          # Note: Difficult to pass env vars directly to docker compose `up`.
          # For CI, it might be easier to test combined queries without relying on archive task timing.
          # Alternatively, manually insert data simulating different ages.
          REDIS_SPEC_RETENTION_HOURS: 0.01 # ~36 seconds
          REDIS_PEAK_RETENTION_HOURS: 0.02 # ~72 seconds

        run: |
          # Copy the modified integration test file
          cp ./server/integration.test.js integration.test.js
          # Run tests
          # Added --runInBand to potentially avoid resource conflicts during DB/Redis setup/teardown
          npx jest integration.test.js --detectOpenHandles --forceExit --verbose --runInBand
        continue-on-error: false

      - name: Clean up Docker Compose resources
        if: always()
        working-directory: ./earthsync
        run: |
          echo "Cleaning up Docker resources..."
          docker compose down -v --remove-orphans --timeout 30
        continue-on-error: false
