version: '3.8'

networks:
  earthsync-network:
    driver: bridge

volumes:
  pgdata:
  redisdata:
  prometheusdata:
  grafanadata:

services:
  redis:
    image: redis:7.2-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-password}
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    networks:
      - earthsync-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-password}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    deploy:
      resources: { limits: { cpus: '0.5', memory: '512M' } }
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-password}

  postgres:
    image: postgres:13-alpine
    environment:
      POSTGRES_USER: ${DB_USER:-user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_DB: ${DB_NAME:-earthsync}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - earthsync-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-user} -d ${DB_NAME:-earthsync}"]
      interval: 5s
      timeout: 3s
      retries: 5
    deploy:
      resources: { limits: { cpus: '0.5', memory: '512M' } }
    restart: unless-stopped

  server:
    build:
       context: ./server
       dockerfile: Dockerfile
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${PORT:-3000}
      - JWT_SECRET=${JWT_SECRET:-1a2b3c4d5e6f7g8h9i0j1k2l3m4n5o6p}
      - DOWNSAMPLE_FACTOR=${DOWNSAMPLE_FACTOR:-5}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CLEANUP_INTERVAL_MS=${CLEANUP_INTERVAL_MS:-3600000}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-password}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-user}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - DB_NAME=${DB_NAME:-earthsync}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3001}
      - API_INGEST_KEY=${API_INGEST_KEY:-changeme-in-production}
      - PEAK_SMOOTHING_WINDOW=${PEAK_SMOOTHING_WINDOW:-5}
      - PEAK_PROMINENCE_FACTOR=${PEAK_PROMINENCE_FACTOR:-1.5}
      - PEAK_MIN_DISTANCE_HZ=${PEAK_MIN_DISTANCE_HZ:-1.0}
      - PEAK_ABSOLUTE_THRESHOLD=${PEAK_ABSOLUTE_THRESHOLD:-1.0}
    depends_on:
      redis: { condition: service_healthy }
      postgres: { condition: service_healthy }
    networks:
      - earthsync-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    deploy:
      resources: { limits: { cpus: '1.0', memory: '1G' } }
    restart: unless-stopped

  detector1: &detector-template
    build: ./detector
    environment:
      - DETECTOR_ID=detector1
      - LATITUDE=40.7128
      - LONGITUDE=-74.0060
      - LOG_LEVEL=${DETECTOR_LOG_LEVEL:-info}
      - DETECTOR_INTERVAL_MS=${DETECTOR_INTERVAL_MS:-5000}
      - DETECTOR_BATCH_SIZE=${DETECTOR_BATCH_SIZE:-1}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-password}
    depends_on:
      redis: { condition: service_healthy }
    networks:
      - earthsync-network
    deploy:
      resources: { limits: { cpus: '0.3', memory: '128M' } }
    restart: unless-stopped

  detector2:
    <<: *detector-template
    environment:
      - DETECTOR_ID=detector2
      - LATITUDE=51.5074
      - LONGITUDE=-0.1278
      - LOG_LEVEL=${DETECTOR_LOG_LEVEL:-info}
      - DETECTOR_INTERVAL_MS=${DETECTOR_INTERVAL_MS:-5000}
      - DETECTOR_BATCH_SIZE=${DETECTOR_BATCH_SIZE:-1}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-password}

  detector3:
    <<: *detector-template
    environment:
      - DETECTOR_ID=detector3
      - LATITUDE=-33.8688
      - LONGITUDE=151.2093
      - LOG_LEVEL=${DETECTOR_LOG_LEVEL:-info}
      - DETECTOR_INTERVAL_MS=${DETECTOR_INTERVAL_MS:-5000}
      - DETECTOR_BATCH_SIZE=${DETECTOR_BATCH_SIZE:-1}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-password}

  client:
    build:
      context: ./client
    ports:
      - "${CLIENT_PORT:-3001}:80"
    depends_on:
      - server
    networks:
      - earthsync-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:80"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources: { limits: { cpus: '0.5', memory: '256M' } }
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.47.2
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--log.level=warn'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheusdata:/prometheus
    networks:
      - earthsync-network
    deploy:
      resources: { limits: { cpus: '0.5', memory: '512M' } }
    restart: unless-stopped

  redis-exporter:
    image: oliver006/redis_exporter:v1.59.0
    environment:
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-password}
      - REDIS_EXPORTER_CHECK_SINGLE_KEYS=spectrogram_history:detector1,spectrogram_history:detector2,spectrogram_history:detector3
      - REDIS_EXPORTER_CHECK_KEY_PATTERNS=userkey:*,peaks:*,spectrogram_history:*
      - LOG_LEVEL=${REDIS_EXPORTER_LOG_LEVEL:-warn}
    ports:
      - "9121:9121"
    networks:
      - earthsync-network
    depends_on:
      redis: { condition: service_healthy }
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9121/metrics"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources: { limits: { cpus: '0.2', memory: '128M' } }
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.2.0
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_LOG_LEVEL=${GF_LOG_LEVEL:-warn}
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    ports:
      - "${GRAFANA_PORT:-3002}:3000"
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - grafanadata:/var/lib/grafana
    networks:
      - earthsync-network
    depends_on:
      - prometheus
    deploy:
      resources: { limits: { cpus: '0.5', memory: '256M' } }
    restart: unless-stopped
